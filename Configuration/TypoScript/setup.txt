config {
    doctype = html5
    language = de
    locale_all = de_DE
    noPageTitle = 2
    admPanel = 0	
    compressCss = 0
    compressJs = 0
    simulateStaticDocuments = 0
    baseURL  = http://{$plugin.tx_mooxcore.settings.domain}
    tx_realurl_enable = 1
    prefixLocalAnchors = all
    tx_cooluri_enable = 0
}


plugin.tx_mooxcore.view {
	extensionKey = moox_core
	templateRootPath = {$plugin.tx_mooxcore.view.templateRootPath}
	partialRootPath = {$plugin.tx_mooxcore.view.partialRootPath}
	layoutRootPath = {$plugin.tx_mooxcore.view.layoutRootPath}
}

plugin.tx_mooxcore.view {
	label = MOOX Content Elements
	extensionKey = FluidTYPO3.MooxCore
	templateRootPath = {$plugin.tx_mooxcore.view.templateRootPath}
	partialRootPath = {$plugin.tx_mooxcore.view.partialRootPath}
	layoutRootPath = {$plugin.tx_mooxcore.view.layoutRootPath}
	widget {
		Tx_Fluid_ViewHelpers_Widget_PaginateViewHelper.templateRootPath < plugin.tx_mooxcore.view.templateRootPath
		TYPO3\CMS\Fluid\ViewHelpers\Widget\PaginateViewHelper.templateRootPath < plugin.tx_mooxcore.view.templateRootPath
	}
}

plugin.tx_mooxcore.settings {
	defaultTemplate = EXT:mooxcore/Resources/Private/Templates/CoreContent/Default.html
	constants {
		auto = auto
		none = none
	}
	header {
		type = 1
		types = 1,2,3,4,5,6,7,8
		autoType = 2
		classNames = page-header,hidden
	}
	container {
		types = none,div,section,chapter
		autoType = div
		classNames = container, trenner
		tagNames = none,div,header,section
	}
	image {
		classNames = image,responsive-image,img-roundend,img-circle,img-portrait,img-grayscale
	}
	caption {
		types = none,div,span,p
	}
}

plugin.tx_mooxcore.bootstrap = USER
plugin.tx_mooxcore.bootstrap {
	userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
	vendorName = FluidTYPO3
	extensionName = MooxCore
}

lib.stdheader = COA

tt_content >
tt_content = CASE
tt_content.key.field = CType
tt_content.text < plugin.tx_mooxcore.bootstrap
tt_content.text.pluginName = Text
tt_content.header < plugin.tx_mooxcore.bootstrap
tt_content.header.pluginName = Header
tt_content.image < plugin.tx_mooxcore.bootstrap
tt_content.image.pluginName = Image
tt_content.textpic < plugin.tx_mooxcore.bootstrap
tt_content.textpic.pluginName = Textpic
tt_content.bullets < plugin.tx_mooxcore.bootstrap
tt_content.bullets.pluginName = Bullets
tt_content.uploads < plugin.tx_mooxcore.bootstrap
tt_content.uploads.pluginName = Uploads
tt_content.table < plugin.tx_mooxcore.bootstrap
tt_content.table.pluginName = Table
tt_content.media < plugin.tx_mooxcore.bootstrap
tt_content.media.pluginName = Media
tt_content.mailform < plugin.tx_mooxcore.bootstrap
tt_content.mailform.pluginName = Mailform
tt_content.search < plugin.tx_mooxcore.bootstrap
tt_content.search.pluginName = Search
tt_content.menu < plugin.tx_mooxcore.bootstrap
tt_content.menu.pluginName = Menu
tt_content.shortcut < plugin.tx_mooxcore.bootstrap
tt_content.shortcut.pluginName = Shortcut
tt_content.div < plugin.tx_mooxcore.bootstrap
tt_content.div.pluginName = Div
tt_content.html < plugin.tx_mooxcore.bootstrap
tt_content.html.pluginName = Html
tt_content.list = COA
tt_content.list {
	20 = CASE
	20.key.field = list_type
}
tt_content.default < plugin.tx_mooxcore.bootstrap
tt_content.default.pluginName = Default

### MOOX Content Wrap ###
###tt_content.stdWrap.wrap = <div class="moox-contentwrap">|</div>

lib.parseTarget {
	override =
}

lib.parseFunc {
	makelinks = 1
	makelinks.mailto.keep = path
	tags {
		link = TEXT
		link {
			current = 1
			typolink.parameter.data = parameters : allParams
		}
	}
	nonTypoTagStdWrap.HTMLparser = 1
	nonTypoTagStdWrap.HTMLparser {
		keepNonMatchedTags = 1
	}
}

lib.parseFunc_RTE < lib.parseFunc
lib.parseFunc_RTE {
	externalBlocks = article,aside,blockquote,div,dd,dl,footer,header,nav,ol,section,table,ul
	externalBlocks {
		# The blockquote content is passed into parseFunc again...
		blockquote.stripNL=1
		blockquote.callRecursive=1
		blockquote.callRecursive.tagStdWrap.HTMLparser = 1

		ol.stripNL=1
		ol.stdWrap.parseFunc = < lib.parseFunc

		ul.stripNL=1
		ul.stdWrap.parseFunc = < lib.parseFunc

		table.stripNL=1
		table.stdWrap.HTMLparser = 1
		table.stdWrap.HTMLparser.tags.table.fixAttrib.class {
			default = contenttable
			always = 1
			list = contenttable
		}
		table.stdWrap.HTMLparser.keepNonMatchedTags = 1
		table.HTMLtableCells=1
		table.HTMLtableCells {
			# Recursive call to self but without wrapping non-wrapped cell content
			default.stdWrap {
				parseFunc =< lib.parseFunc_RTE
				parseFunc.nonTypoTagStdWrap.encapsLines.nonWrappedTag =
			}
			addChr10BetweenParagraphs=1
		}
		div.stripNL = 1
		div.callRecursive = 1

		article < .div
		aside < .div
		footer < .div
		header < .div
		nav < .div
		section < .div

		# Definition list processing
		dl < .div
		dd < .div
	}
	nonTypoTagStdWrap.encapsLines {
		encapsTagList = p,pre,h1,h2,h3,h4,h5,h6,hr,dt : externalBlocks
		remapTag.DIV = P
		nonWrappedTag = P
		innerStdWrap_all.ifBlank = &nbsp;
	}
	nonTypoTagStdWrap.HTMLparser = 1
	nonTypoTagStdWrap.HTMLparser {
		keepNonMatchedTags = 1
		htmlSpecialChars = 2
	}
}
